---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
  title?: string;
}

const { headings, title = "Table of Contents" } = Astro.props;
const tocHeadings = headings.filter(({ depth }) => depth > 1 && depth < 5);
---

{
  tocHeadings.length > 0 && (
    <nav class="my-8 rounded-lg border border-zinc-200 bg-zinc-50 p-6 dark:border-zinc-700 dark:bg-zinc-900/50">
      <div class="mb-4 flex items-center gap-2">
        <svg
          class="h-5 w-5 text-zinc-600 dark:text-zinc-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 10h16M4 14h16M4 18h16"
          />
        </svg>
        <h2 class="text-lg font-semibold text-zinc-900 dark:text-zinc-100">
          {title}
        </h2>
      </div>

      <ul class="space-y-2">
        {tocHeadings.map((heading) => (
          <li
            class={`toc-item ${heading.depth === 2 ? "pl-2" : heading.depth === 3 ? "pl-6" : "pl-10"}`}
          >
            <a
              href={`#${heading.slug}`}
              class="toc-link block rounded px-2 py-1 text-sm text-zinc-600 transition-all duration-200 hover:bg-zinc-100 hover:text-zinc-900 dark:text-zinc-400 dark:hover:bg-zinc-800 dark:hover:text-zinc-100"
              data-depth={heading.depth}
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  )
}

<style>
  @reference {
    @import "tailwindcss";
  }

  .toc-link.active {
    @apply border-l-3 border-l-[#3b82f6] bg-[#f4f4f5] font-medium text-[#18181b] dark:border-l-[#60a5fa] dark:bg-[#27272a] dark:text-[#fafafa];
  }

  html {
    scroll-behavior: smooth;
  }
  :global(h2[id], h3[id], h4[id]) {
    scroll-margin-top: 2rem;
  }

  /* Enhanced hover effects */
  .toc-link {
    position: relative;
    overflow: hidden;
  }

  .toc-link::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(59, 130, 246, 0.1),
      transparent
    );
    transition: width 0.3s ease;
  }

  .toc-link:hover::before {
    width: 100%;
  }

  .toc-link.active::before {
    width: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(59, 130, 246, 0.2),
      transparent
    );
  }
</style>

<script>
  function initTOC() {
    const tocLinks = document.querySelectorAll(".toc-link");
    if (!tocLinks.length) return;

    // Active section highlighting with Intersection Observer (more performant)
    const observerOptions = {
      rootMargin: "-20% 0px -70% 0px",
      threshold: 0,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute("id");
        const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);

        if (entry.isIntersecting) {
          // Remove active class from all links
          tocLinks.forEach((link) => link.classList.remove("active"));
          // Add active class to current link
          if (tocLink) tocLink.classList.add("active");
        }
      });
    }, observerOptions);

    // Observe all headings
    document.querySelectorAll("h2[id], h3[id], h4[id]").forEach((heading) => {
      observer.observe(heading);
    });
  }

  // Initialize
  document.readyState === "loading"
    ? document.addEventListener("DOMContentLoaded", initTOC)
    : initTOC();
</script>
